ActivityData<-read.csv("./activity.csv", stringsAsFactors=F)
head(ActivityData)
View(ActivityData)
StepsHist<-aggregate(ActivityData,by=date,FUN=sum)
StepsHist<-aggregate(ActivityData,by="date",FUN=sum)
StepsHist<-aggregate(ActivityData,by=c("date"),FUN=sum)
StepsHist<-aggregate(ActivityData,by=list("date"),FUN=sum)
StepsHist<-aggregate(steps~date,.data=ActivityData,sum)
StepsHist<-aggregate(steps~date,.data=ActivityData,FUN=sum)
StepsHist<-aggregate(steps~date,.data=ActivityData,sum)
StepsHist<-aggregate(steps~date,data=ActivityData,sum)
View(StepsHist)
hist(StepsHist,breaks=StepsHist$date)
hist(StepsHist$steps,breaks=StepsHist$date)
qplot(date,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
require(ggplot)
require(ggplot2)
qplot(date,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
rm(stepsHist)
rm(StepsHist)
StepsSummed<-aggregate(steps~date,data=ActivityData,sum)
StepsMean<-mean(StepsSummed$steps)
StepsMedian<-median(StepsSummed$steps)
View(StepsSummed)
print(StepsMean,StepsMedian)
print(StepsData)
StepsData<-cbind(StepsMean,StepsMedian)
View(StepsSummed)
View(StepsData)
print(StepsData)
qplot(steps,interval, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
qplot(steps,interval, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
qplot(interval,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
View(ActivityData)
qplot(interval,steps, data=ActivityData, stat="summary", fun.y="mean", geom="bar")
StepsAveraged<-aggregate(steps~interval,data=ActivityData,mean)
View(StepsAveraged)
MaxStepsPeriod<-StepsAveraged[which.max(StepsAveraged[,2],1)]
MaxStepsPeriod<-StepsAveraged[which.max(StepsAveraged[,2],)]
MaxStepsPeriod<-StepsAveraged[which.max(StepsAveraged[,2]),]
View(MaxStepsPeriod)
View(MaxStepsPeriod)
View(StepsAveraged)
View(MaxStepsPeriod)
View(MaxStepsPeriod)
MaxStepsInterval<-MaxStepsPeriod[1,1]
print(MaxStepsInterval)
View(StepsAveraged)
View(StepsAveraged)
ActivityDataImpute<-ActivityData
View(StepsAveraged)
View(ActivityDataImpute)
for (i to nrows(ActivityDataImpute)){
if (Match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i to nrows(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrows(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
View(ActivityDataImpute)
ActivityDataImpute<-ActivityData
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1])=1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1])==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=NA)
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA)
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA){}
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=NA){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=="NA"){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=="NA"){
merge(ActivityDataImpute[i,1],StepsAveraged)
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=="NA"){
merge(ActivityDataImpute[i,1],StepsAveraged)
}
}
for (i in 1:nrow(ActivityDataImpute))
if (ActivityDataImpute[i,1])=="NA"){
merge(ActivityDataImpute[i,1],StepsAveraged)
}
View(ActivityDataImpute)
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){}
}
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
debug
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
debugSource('~/GitHub/RepData_PeerAssessment1/PeerAssessment1.R')
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<- 2
#            StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])="T"){
ActivityDataImpute[i,1]<- 2
#            StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])==T){
ActivityDataImpute[i,1]<- 2
#            StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
ActivityDataImpute<-ActivityData
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])==T){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
ActivityDataImpute[1,1]<-StepsAveraged[match(ActivityDataImpute[1,3],StepsAveraged),2]
View(ActivityDataImpute)
ActivityDataImpute[1,1]<-StepsAveraged[match(ActivityDataImpute[1,3],StepsAveraged),2]
match(activityDataImpute[1,3],StepsAveraged)
match(ActivityDataImpute[1,3],StepsAveraged)
match(ActivityDataImpute[1,3],StepsAveraged[,1])
match(ActivityDataImpute[100,3],StepsAveraged[,1])
match(ActivityDataImpute[1000,3],StepsAveraged[,1])
ActivityDataImpute[1,1]<-StepsAveraged[match(ActivityDataImpute[1,3],StepsAveraged[,1]),2]
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])==T){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged[,1]),2]
}
}
View(ActivityDataImpute)
require(ggplot2)
qplot(date,steps, data=ActivityDataImpute, stat="summary", fun.y="sum", geom="bar")
StepsSummedImpute<-aggregate(steps~date,data=ActivityDataImpute,sum)
StepsMeanImpute<-mean(StepsSummedImpute$steps)
StepsMedianImpute<-median(StepsSummedImpute$steps)
StepsDataImpute<-cbind(StepsMeanImpute,StepsMedianImpute)
print(StepsDataImpute)
StepsMax<-which.max(StepsSummed$steps)
print(StepsMax)
View(StepsSummed)
StepsMax<-StepsSummed[which.max(StepsSummed$steps),2]
print(StepsMax)
