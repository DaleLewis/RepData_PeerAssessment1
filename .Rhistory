ActivityData<-read.csv("./activity.csv", stringsAsFactors=F)
head(ActivityData)
View(ActivityData)
StepsHist<-aggregate(ActivityData,by=date,FUN=sum)
StepsHist<-aggregate(ActivityData,by="date",FUN=sum)
StepsHist<-aggregate(ActivityData,by=c("date"),FUN=sum)
StepsHist<-aggregate(ActivityData,by=list("date"),FUN=sum)
StepsHist<-aggregate(steps~date,.data=ActivityData,sum)
StepsHist<-aggregate(steps~date,.data=ActivityData,FUN=sum)
StepsHist<-aggregate(steps~date,.data=ActivityData,sum)
StepsHist<-aggregate(steps~date,data=ActivityData,sum)
View(StepsHist)
hist(StepsHist,breaks=StepsHist$date)
hist(StepsHist$steps,breaks=StepsHist$date)
qplot(date,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
require(ggplot)
require(ggplot2)
qplot(date,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
rm(stepsHist)
rm(StepsHist)
StepsSummed<-aggregate(steps~date,data=ActivityData,sum)
StepsMean<-mean(StepsSummed$steps)
StepsMedian<-median(StepsSummed$steps)
View(StepsSummed)
print(StepsMean,StepsMedian)
print(StepsData)
StepsData<-cbind(StepsMean,StepsMedian)
View(StepsSummed)
View(StepsData)
print(StepsData)
qplot(steps,interval, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
qplot(steps,interval, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
qplot(interval,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
View(ActivityData)
qplot(interval,steps, data=ActivityData, stat="summary", fun.y="mean", geom="bar")
StepsAveraged<-aggregate(steps~interval,data=ActivityData,mean)
View(StepsAveraged)
MaxStepsPeriod<-StepsAveraged[which.max(StepsAveraged[,2],1)]
MaxStepsPeriod<-StepsAveraged[which.max(StepsAveraged[,2],)]
MaxStepsPeriod<-StepsAveraged[which.max(StepsAveraged[,2]),]
View(MaxStepsPeriod)
View(MaxStepsPeriod)
View(StepsAveraged)
View(MaxStepsPeriod)
View(MaxStepsPeriod)
MaxStepsInterval<-MaxStepsPeriod[1,1]
print(MaxStepsInterval)
View(StepsAveraged)
View(StepsAveraged)
ActivityDataImpute<-ActivityData
View(StepsAveraged)
View(ActivityDataImpute)
for (i to nrows(ActivityDataImpute)){
if (Match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i to nrows(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrows(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1],nomatch=F)==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
View(ActivityDataImpute)
ActivityDataImpute<-ActivityData
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1])=1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (match(NA,ActivityDataImpute[i,1])==1)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA)
ActivityDataImpute[i,1]==StepsAveraged[ActivityDataImpute[i,2],1]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=NA)
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA)
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA){}
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])==NA){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=NA){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=="NA"){
ActivityDataImpute[i,1]<-StepsAveraged[ActivityDataImpute[i,2],1]}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=="NA"){
merge(ActivityDataImpute[i,1],StepsAveraged)
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,1])=="NA"){
merge(ActivityDataImpute[i,1],StepsAveraged)
}
}
for (i in 1:nrow(ActivityDataImpute))
if (ActivityDataImpute[i,1])=="NA"){
merge(ActivityDataImpute[i,1],StepsAveraged)
}
View(ActivityDataImpute)
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){}
}
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
debug
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
debugSource('~/GitHub/RepData_PeerAssessment1/PeerAssessment1.R')
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])=="T"){
ActivityDataImpute[i,1]<- 2
#            StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])="T"){
ActivityDataImpute[i,1]<- 2
#            StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])==T){
ActivityDataImpute[i,1]<- 2
#            StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
ActivityDataImpute<-ActivityData
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])==T){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged),2]
}
}
View(ActivityDataImpute)
ActivityDataImpute[1,1]<-StepsAveraged[match(ActivityDataImpute[1,3],StepsAveraged),2]
View(ActivityDataImpute)
ActivityDataImpute[1,1]<-StepsAveraged[match(ActivityDataImpute[1,3],StepsAveraged),2]
match(activityDataImpute[1,3],StepsAveraged)
match(ActivityDataImpute[1,3],StepsAveraged)
match(ActivityDataImpute[1,3],StepsAveraged[,1])
match(ActivityDataImpute[100,3],StepsAveraged[,1])
match(ActivityDataImpute[1000,3],StepsAveraged[,1])
ActivityDataImpute[1,1]<-StepsAveraged[match(ActivityDataImpute[1,3],StepsAveraged[,1]),2]
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (is.na(ActivityDataImpute[i,1])==T){
ActivityDataImpute[i,1]<-StepsAveraged[match(ActivityDataImpute[i,3],StepsAveraged[,1]),2]
}
}
View(ActivityDataImpute)
require(ggplot2)
qplot(date,steps, data=ActivityDataImpute, stat="summary", fun.y="sum", geom="bar")
StepsSummedImpute<-aggregate(steps~date,data=ActivityDataImpute,sum)
StepsMeanImpute<-mean(StepsSummedImpute$steps)
StepsMedianImpute<-median(StepsSummedImpute$steps)
StepsDataImpute<-cbind(StepsMeanImpute,StepsMedianImpute)
print(StepsDataImpute)
StepsMax<-which.max(StepsSummed$steps)
print(StepsMax)
View(StepsSummed)
StepsMax<-StepsSummed[which.max(StepsSummed$steps),2]
print(StepsMax)
x<-strptime(ActivityDataImpute$interval,%R)
x<-strptime(ActivityDataImpute$interval,"%R")
rm(x)
x<-as.ts(ActivityDataImpute$interval)
head(x,100)
head(x,200)
tail(x,200)
ActivityDataImpute$intervalplot<-as.ts(ActivityDataImpute$interval)
ActivityDataImpute$weekday<-weekdays(ActivityDataImpute$date)
ActivityDataImpute$weekday<-weekdays(strptime(ActivityDataImpute$date))
ActivityDataImpute$weekday<-weekdays(strptime(ActivityDataImpute$date,"%Y-%m-%d"))
ActivityDataImpute$weekdayfactor<-NA
for (i in 1:nrow(ActivityDataImpute)){
if ActivityFactorImpute[i,5]=="Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"{
ActivityFactorImpute[i,6]=1
}
else{
ActivityFactorImpute[i,6]=0
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityFactorImpute[i,5]=="Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"){
ActivityFactorImpute[i,6]=1
}
else{
ActivityFactorImpute[i,6]=0
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,5]=="Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday"){
ActivityDataImpute[i,6]=1
}
else{
ActivityDataImpute[i,6]=0
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,5]=="Sunday"|ActivityDataImpute[i,5]=="Saturday"{
ActivityDataImpute[i,6]=1
}
else{
ActivityDataImpute[i,6]=0
}
}
View(ActivityDataImpute)
View(ActivityDataImpute)
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,5]=="Sunday"|ActivityDataImpute[i,5]=="Saturday"{
ActivityDataImpute[i,6]=1
}
else{
ActivityDataImpute[i,6]=0
}
}
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,5]=="Sunday"|ActivityDataImpute[i,5]=="Saturday"){
ActivityDataImpute[i,6]=1
}
else{
ActivityDataImpute[i,6]=0
}
}
View(ActivityDataImpute)
tail(ActivityDataImpute,200)
tail(ActivityDataImpute,2000)
View(ActivityDataImpute)
ActivityDataImpute$weekdayfactor<- factor(ActivityDataImpute$weekdayfactor, labels = c("weekday", "Weekend"))
View(ActivityDataImpute)
ActivityDataImpute$weekdayfactor<- factor(ActivityDataImpute$weekdayfactor, labels = c("Weekday", "Weekend"))
View(ActivityDataImpute)
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="sum", geom="line")
require(ggplot2)
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="sum", geom="line")
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="sum", geom="line",facets=~weekdayfactor)
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=~weekdayfactor)
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=~weekdayfactor,xlab="Time of Day",ylab="Steps")
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
qplot(date,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar")
qplot(date,steps, data=ActivityData, stat="summary", fun.y="sum", geom="bar",xlab="Date",ylab="Steps")
qplot(interval,steps, data=ActivityData, stat="summary", fun.y="mean", geom="bar",xlab="Date",ylab="Steps"))
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
ActivityDataImpute$intervalplot<-as.ts(ActivityDataImpute$interval)
#find the day of the week for each date
ActivityDataImpute$weekday<-weekdays(strptime(ActivityDataImpute$date,"%Y-%m-%d"))
# create an empty column
ActivityDataImpute$weekdayfactor<-NA
#populate the new column with the a 1 if the date is a weekend day or 0 if the date is a weekday
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,5]=="Sunday"|ActivityDataImpute[i,5]=="Saturday"){
ActivityDataImpute[i,6]=1
}
else{
ActivityDataImpute[i,6]=0
}
#covert this to a factor variable
ActivityDataImpute$weekdayfactor<- factor(ActivityDataImpute$weekdayfactor, labels = c("Weekday", "Weekend"))
#create a plot using ggplot2 qplot function and use facets for weekday and weekend
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
)
for (i in 1:nrow(ActivityDataImpute)){
if (ActivityDataImpute[i,5]=="Sunday"|ActivityDataImpute[i,5]=="Saturday"){
ActivityDataImpute[i,6]=1
}
else{
ActivityDataImpute[i,6]=0
}
}
#covert this to a factor variable
ActivityDataImpute$weekdayfactor<- factor(ActivityDataImpute$weekdayfactor, labels = c("Weekday", "Weekend"))
#create a plot using ggplot2 qplot function and use facets for weekday and weekend
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
require(stringi)
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0"
)
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-format(ActivityDataImpute$intervalplot,"%T")
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
require(ggplot2)
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
View(ActivityDataImpute)
View(ActivityDataImpute)
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
ggplot(ActivityDataImpute,aes=(x=intervalplot,y=mean(steps)),geom="line",facets=weekdayfactor~.)
ggplot(ActivityDataImpute,aes=(x=intervalplot,y=mean(steps))+geom="line"+facets=weekdayfactor~.
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%H%M")
View(ActivityDataImpute)
require(stringi)
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-format(ActivityDataImpute$intervalplot,"%T")
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-format(ActivityDataImpute$intervalplot,"%H:%M")
View(ActivityDataImpute)
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-format(ActivityDataImpute$intervalplot,"%R")
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ActivityDataImpute$intervalplot<-as.POSIXct(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-format(ActivityDataImpute$intervalplot,"%R")
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ctivityDataImpute$intervalplot<-strftime(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-strftime(ActivityDataImpute$intervalplot,format="%H%M")
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%H%M")
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ActivityDataImpute$intervalplot<-paste(as.character(ActivityDataImpute$date),ActivityDataImpute$intervalplot,sep=" ")
ActivityDataImpute$intervalplot<-strptime(ActivityDataImpute$intervalplot,format="%Y-%m-%d %H%M")
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
ActivityDataImpute$plotTime <- as.numeric(ActivityDataImputeJ$intervalplot - trunc(ActivityDataImpute$intervalplot, "days"))
ActivityDataImpute$plotTime <- as.numeric(ActivityDataImpute$intervalplot - trunc(ActivityDataImpute$intervalplot, "days"))
qplot(plotTime,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
ActivityDataImpute$intervalplot<-stri_pad_left(as.character(ActivityDataImpute$interval),4,pad="0")
ActivityDataImpute$intervalplot<-as.ts(ActivityDataImpute$intervalplot)
qplot(intervalplot,steps, data=ActivityDataImpute, stat="summary", fun.y="mean", geom="line",facets=weekdayfactor~.,xlab="Time of Day",ylab="Steps")
